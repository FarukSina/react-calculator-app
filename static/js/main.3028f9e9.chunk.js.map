{"version":3,"sources":["Components/Button.js","Components/Input.js","Components/ClearInput.js","Components/LocalStorageKey.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","handleClick","children","className","val","isNaN","Input","input","ClearInput","handleClear","style","cursor","LocalStorageKey","a","b","LOCAL_STORAGE_KEY","localName","storedInputs","localStorage","getItem","useEffect","setItem","App","useState","setInput","operators","console","log","addToInput","charAt","length","includes","replace","class","String","math","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3028f9e9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst isOperator = val => {\r\n  return !isNaN(val) || val === \".\" || val === \"=\";\r\n};\r\n\r\nconst Button = props => {\r\n  return (\r\n    <div\r\n      onClick={() => props.handleClick(props.children)}\r\n      className={`button-wrapper${\r\n        isOperator(props.children) ? `` : \" operator\"\r\n      }`}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Input.css\";\r\nconst Input = props => <div className=\"input\">{props.input}</div>;\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport \"./ClearInput.css\";\r\nconst ClearInput = props => {\r\n  return (\r\n    <div\r\n      className=\"clear-input\"\r\n      onClick={props.handleClear}\r\n      style={{ cursor: \"pointer\" }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default ClearInput;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst LocalStorageKey = ({ a, b, localName }) => {\r\n  const LOCAL_STORAGE_KEY = localName;\r\n  const storedInputs = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n\r\n  useEffect(() => {\r\n    if (storedInputs) {\r\n      b(storedInputs);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, a);\r\n  }, [a]);\r\n  return null;\r\n};\r\nexport default LocalStorageKey;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Button from \"./Components/Button\";\r\nimport Input from \"./Components/Input\";\r\nimport ClearInput from \"./Components/ClearInput\";\r\nimport LocalStorageKey from \"./Components/LocalStorageKey\";\r\nimport * as math from \"mathjs\";\r\n\r\nconst App = () => {\r\n  const STORAGE_KEY = \"math.calculator\";\r\n\r\n  const [input, setInput] = useState(\"0\");\r\n  const operators = [\"+\", \"-\", \"*\", \"/\"];\r\n\r\n  useEffect(() => {\r\n    console.log(\"Input\", input);\r\n  }, [input]);\r\n\r\n  const handleEqual = () => {\r\n    setInput(String(math.evaluate(input)));\r\n  };\r\n  const addToInput = val => {\r\n    if (\r\n      input.charAt(input.length - 1) === \".\" &&\r\n      (val === \".\" || operators.includes(val))\r\n    ) {\r\n      setInput(input.replace(/.$/, val));\r\n      return;\r\n    }\r\n    if (input === \"0\" && !operators.includes(val) && val !== \".\") {\r\n      setInput(val);\r\n      return;\r\n    }\r\n    if (\r\n      operators.includes(input.charAt(input.length - 1)) &&\r\n      operators.includes(val)\r\n    ) {\r\n      setInput(input.replace(/.$/, val));\r\n      return;\r\n    }\r\n\r\n    setInput(input + val);\r\n  };\r\n\r\n  const handleClearInput = () => {\r\n    setInput(\"0\");\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"calc-wrapper\">\r\n        <p class=\"heading\">Calculator</p>\r\n        <LocalStorageKey a={input} b={setInput} localName={STORAGE_KEY} />\r\n        <Input input={input} />\r\n        <div className=\"row\">\r\n          <Button handleClick={addToInput}>7</Button>\r\n          <Button handleClick={addToInput}>8</Button>\r\n          <Button handleClick={addToInput}>9</Button>\r\n          <Button handleClick={addToInput}>/</Button>\r\n        </div>\r\n        <div className=\"row\">\r\n          <Button handleClick={addToInput}>4</Button>\r\n          <Button handleClick={addToInput}>5</Button>\r\n          <Button handleClick={addToInput}>6</Button>\r\n          <Button handleClick={addToInput}>*</Button>\r\n        </div>\r\n        <div className=\"row\">\r\n          <Button handleClick={addToInput}>1</Button>\r\n          <Button handleClick={addToInput}>2</Button>\r\n          <Button handleClick={addToInput}>3</Button>\r\n          <Button handleClick={addToInput}>+</Button>\r\n        </div>\r\n        <div className=\"row\">\r\n          <Button handleClick={addToInput}>.</Button>\r\n          <Button handleClick={addToInput}>0</Button>\r\n          <Button handleClick={handleEqual}>=</Button>\r\n          <Button handleClick={addToInput}>-</Button>\r\n        </div>\r\n        <div className=\"row\">\r\n          <ClearInput handleClear={handleClearInput}>Clear</ClearInput>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}